/*
 *	2706790	2011-10-29 23:26:50	 Accepted	3556	C++	0	188	030902414
 *	
 *  解：容斥原理：个数为n的集合子集个数为2^n。
 *	从子集中选k个的有序组合个数（子集可重复被选中）有 (2^n)^k=2^(n*k);
 *  故总数为S=2^(n*k);
 *  设p(x)为k个集合的有序组合的个数，这些集合都包含至少一个x。
 *	p(x1&x2)为k个集合的有序组合的个数，这些集合都包含至少一个x1和x2
 *  p(x1&x2&x3...xk)为k个集合的有序组合的个数，这些集合都包含至少一个x1,x2...xk。
 *	而 
 *	p(x)=(2^(n-1))^k =2^((n-1)*k);
 *	p(x1&x2)=(2^(n-2))^k=2^((n-2)*k);
 *  p(x1&x2&...&xi)=(2^(n-i))^k=2^((n-i)*k);
 *  由容斥原理知，我们要得到的就是
 *	S-(n,1)*p(x) + (n,2)*(p(x1&x2)-(n,3)*(p(x1&x2&x3)+....(-1)^i*(n,i)*p(x1&x2&...xi)...(-1)^n*(n,n)*p(x1&x2...&xn); 
 *	//(n,1)为组合数.
 *	化简公式可得ans=(2^k-1)^n;二分快速求幂可得答案。
 *	
 */



#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
#define M 1000000007
typedef long long llong;

llong PowerMod(llong a,int b){//中间乘法会溢出！所以a要用long long。


	llong res=1;
	while(b){

		if(b&1)
			res=(res*a)%M;
		a=a*a%M;
		b>>=1;
	}
	return res;
}


int main(){

	int n,k;
	llong a;
	while(scanf("%d%d",&n,&k)!=EOF){

		a=PowerMod(2,k);
		a-=1;
		if(a<0)
			a+=M;
		printf("%lld\n",PowerMod(a,n));

	}
	return 0;
}