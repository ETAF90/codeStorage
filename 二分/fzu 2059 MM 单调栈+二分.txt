/*
 * 解：单调栈扫一遍数组，得到值为v的最大长度
 *	   按值v排序，二分找到第一个>=x 的v，可得最大长度。
 *
*/


#include<iostream>
#include<cstdio>
#include<algorithm>
#include<map>
using namespace std;
const int N=100001;

typedef struct Node{

	int v,num;
	bool operator<(const Node& z)const{

		if(v==z.v)
			return num>z.num;
		return v<z.v;
	}

}Node;

Node cnt[N],stack[N];
int a[N],stop,ntop,top;

void init(int n){

	stop=0;
	ntop=0;
	int num;

	/*
	printf("\n");
	for(int i=0;i<n;++i)
		printf("%d ",a[i]);
	printf("\n\n");
	*/
	for(int i=0;i<n;++i){

		if(stop == 0){

			stack[stop].v=a[i];
			stack[stop++].num=1;

		}else{
			if(stack[stop-1].v<a[i]){

				stack[stop].v=a[i];
				stack[stop++].num=1;
			}
			else{

				num = 0;

				while(stop>0){

					if(stack[stop-1].v>a[i]){

						stop--;
						cnt[ntop].v=stack[stop].v;
						cnt[ntop].num=stack[stop].num+num;
						num = cnt[ntop].num;
						ntop++;
					}
					else{
						break;
					}
				}
				stack[stop].v=a[i];
				stack[stop++].num=num+1;
			}
		}
	}
	num=0;
	while(stop>0){

		stop--;
		cnt[ntop].v=stack[stop].v;
		cnt[ntop].num=stack[stop].num+num;
		num = cnt[ntop].num;
		ntop++;
	}

	//排序，去重，去重要注意取最大num
	sort(cnt,cnt+ntop);
	/*
	for(int i=0;i<ntop;++i)
	printf("%d ",cnt[i].v);
	printf("\n");
	for(int i=0;i<ntop;++i)
	printf("%d ",cnt[i].num);
	printf("\n");
	*/
	
	top=0;
	for(int i=0;i<ntop;++i){
		
		cnt[top].v=cnt[i].v;
		cnt[top++].num=cnt[i].num;
		while(i+1<ntop && cnt[i].v==cnt[i+1].v)i++;
		
	}
	//-----------------------------------------------------------------------------
	//这里必须注意，否则会wa，得到的数组必须经过处理才是单调的，测试数据：4 4 
    //																	  2 1 3 4
    //																      1 1
	//																	  1 2
	//																	  1 3
	//																	  1 4

	for(int i=top-2;i>=0;--i)
		cnt[i].num=cnt[i].num>cnt[i+1].num?cnt[i].num:cnt[i+1].num;
	
	//-------------------------------------------------------------------------------------
	/*for(int i=0;i<top;++i)
	printf("%d ",cnt[i].v);
	printf("\n");
	for(int i=0;i<top;++i)
	printf("%d ",cnt[i].num);
	printf("\n");
	*/
}


int Bsearch(int left,int right,int x){ //找第一个 >=x 


	int mid;

	while(left<right){

		mid = (left+right)>>1;

		if(cnt[mid].v >= x)

			right = mid;
		else{

			left = mid+1;
		}
	}
	if(cnt[right].v>=x)
		return cnt[right].num;
	else
		return 0;

}

int main(){

	freopen("in.txt","r",stdin);
	int n,m,i,op,x,y;
	while(scanf("%d%d",&n,&m)!=EOF){

		for(i=0;i<n;++i){

			scanf("%d",a+i);
		}
		init(n);
		while(m--){

			scanf("%d",&op);
			if(op==1){

				scanf("%d",&x);
				printf("%d\n",Bsearch(0,top-1,x));

			}else{

				scanf("%d%d",&y,&x);
				a[y-1]=x;
				init(n);

			}
		}
	}
	return 0;
}