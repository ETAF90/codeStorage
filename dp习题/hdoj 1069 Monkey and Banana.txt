#include<stdio.h>
#include<string.h>
#define N 100
int w[N],l[N],h[N],f[N];						//f[i]表示以第i个木块为顶部能达到的最大高度。
bool flag[N];
int main()
{
	int n,i,j,a,b,c,max,len,cnt,cases=1;
	while(scanf("%d",&n) && n)
	{
		for(i=0,j=0;i<n;i++)
		{
			scanf("%d %d %d",&a,&b,&c);
			if(a==b && a==c)				//转换成所有可能的长宽高组合，（长大于等于宽）
			{
				w[j]=l[j]=h[j]=a;
				j++;
			}
			else
				if(a==b)
				{
					h[j]=a;
					if(b>c)
					{l[j]=b;w[j]=c;}
					else
					{l[j]=c;w[j]=b;}
					j++;
					h[j]=c;
					l[j]=w[j]=a;
					j++;
					
				}
				else
					if(a==c)
					{
						h[j]=a;
						if(b>c)
						{l[j]=b;w[j]=c;}
						else
						{l[j]=c;w[j]=b;}
						j++;
						h[j]=b;
						l[j]=w[j]=a;
						j++;
					}
					else
						if(b==c)
						{
							h[j]=b;
							if(a>c)
							{l[j]=a;w[j]=c;}
							else
							{l[j]=c;w[j]=a;}
							j++;
							h[j]=a;
							l[j]=w[j]=b;
							j++;
						}
				else
				{
					h[j]=a;
					if(b>c)
					{l[j]=b;w[j]=c;}
					else
					{l[j]=c;w[j]=b;}
					j++;
					h[j]=b;
					if(a>c)
					{l[j]=a;w[j]=c;}
					else
					{l[j]=c;w[j]=a;}
					j++;
					h[j]=c;
					if(a>b)
					{l[j]=a;w[j]=b;}
					else
					{l[j]=b;w[j]=a;}
					j++;
			
				}	
		}
		len=j;
		cnt=j;
		memset(flag,1,sizeof(flag));
	//	for(i=0;i<len;i++)
	//		printf("%d %d %d\n",h[i],l[i],w[i]);
		for(i=0;i<len;i++)
			f[i]=h[i];
		bool flag1;
		while(cnt)				//一层一层往上叠，cnt表示还能叠的木块种数。
		{
			for(i=0;i<len;i++)
			{
				if(flag[i])
				{
				flag1=false;
				for(j=0;j<len;j++)
				{
			
						if(l[i]<l[j] && w[i]<w[j]&&f[i]<f[j]+h[i])
						{
							f[i]=f[j]+h[i];
							flag1=true;
						}
				}
				if(!flag1)
				{
					cnt--;
					flag[i]=false;
				}
				}
			}
		}
		max=0;
		for(i=0;i<len;i++)
		{
			if(max<f[i])
				max=f[i];
		}
		printf("Case %d: maximum height = %d\n",cases++,max);
	}
	return 0;
}