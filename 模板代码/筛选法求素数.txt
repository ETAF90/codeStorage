#include<iostream>
using namespace std;
int main()
{
	int i;
	int a[201]={0};
	for( i=2;i<=200;i++)
	{
		for(int j=i;j*i<=200;j++)
			a[j*i]=1;
	}
	for( i=2;i<=200;i++)
		if(!a[i])
			cout<<i<<" ";
		cout<<endl;
	return 0;
}

函数：线性时间求筛选素数。
#include<iostream>
#include<cmath>
using namespace std;
#define N 1000000
int prime[N];
bool isprime[N];
int SievePrime(int limit)		//求limit以内的素数，返回素数个数。
{
	memset(isprime,0,sizeof(isprime));
	int i,j;
	int sievelimit=sqrt((double)limit);
	for(i=2;i<=sievelimit;i++)
	{
			for(j=i+i;j<=limit;j+=i)
				isprime[j]=1;

	}
	for(i=2,j=0;i<=limit;i++)
	{
		if(!isprime[i])
			prime[j++]=i;
	}
	return j;
}

函数：两倍压缩筛选法

#include<iostream>
#include<cmath>
using namespace std;
#define N 1000000
int p[N],prime[N];//p[i]表示（i*2+1）是否为素数，prime 数组用来存筛选出来的数据。
int SievePrime(int limit)//二倍压缩筛选素数
{
	memset(p,0,sizeof(p));
	int sievelimit=(sqrt((double)limit)-1)/2; //  sqrt(limit)=2*sievelimit+1;
	int maxindex=(limit-1)/2;                 //  2*maxindex+1 表示 limit
	int i,j,t,num;
	for(i=1;i<=sievelimit;i++)
	{

			t=2*i+1;
			for(j=2*i*(i+1);j<=maxindex;j+=t)
			{
				p[j]=1;//标记为非素数
			}
		
	}
	prime[0]=2;
	num=1;
	for(i=1;i<=maxindex;i++)
		if(!p[i])
			prime[num++]=i*2+1;
	return num;
}

