
/*
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <utility>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;
int main()
{
	map 
	return 0;
}
*/

#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <utility>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;
#define N 30005
bool flag[10001];
int ans,n,j;
struct region
{int l,r;}reg[10005];
int ls[30006];
struct node
{
	int l,r,v;
} a[3*N];
void build(int i,int left,int right)
{
	a[i].l=left;
	a[i].r=right;
	a[i].v=-1;
	if(left==right)
		return ;
	int mid=(left+right)>>1;
	build((i<<1),left,mid);
	build((i<<1)+1,mid+1,right);
}
void paint(int i,int left,int right,int color)
{
	if(a[i].l==left && a[i].r==right)
	{a[i].v=color;return;}
	if(a[i].v==color)
		return;
	if(a[i].v)
	{
		a[i*2].v=a[i*2+1].v=a[i].v;
		a[i].v=0;
	}
	int mid=(a[i].l+a[i].r)>>1;
	if(right<=mid)
		paint((i<<1),left,right,color);
	else
		if(left>mid)
			paint((i<<1)+1,left,right,color);
		else
		{
			paint(i<<1,left,mid,color);
			paint((i<<1)+1,mid+1,right,color);
		}
}
void query(int i,int left,int right)
{
	if(a[i].v)
	{
		if(!flag[a[i].v] && a[i].v!=-1)
		{
			ans++;
			flag[a[i].v]=true;
		}
		return;
	}
	int mid=(a[i].l+a[i].r)>>1;	
	if(right<=mid)
		query((i<<1),left,right);
	else
		if(left>mid)
			query((i<<1)+1,left,right);
		else
		{
			query((i<<1),left,mid);
			query((i<<1)+1,mid+1,right);
		}
	
}
int  findpos(int x)
{
	int  left=0,right=j-1,mid;
	while(left<=right)
	{
		mid=(left+right)>>1;
		if(x==ls[mid])
			return mid;
		else
			if(x>ls[mid])
				left=mid+1;
			else
				right=mid-1;
	}
	return -1;

}
int main()
{
	int i,c;
	scanf("%d",&c);
	while(c--)
	{
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			scanf("%d%d",&reg[i].l,&reg[i].r);
			ls[i*2]=reg[i].l;ls[i*2+1]=reg[i].r;
		}
		sort(ls,ls+2*n);
	//ШЅжи
		j=1;
		for(i=1;i<2*n;i++)
		{
			if(ls[i]!=ls[i-1])
				ls[j++]=ls[i];
		}
	/*	for(i=0;i<j;i++)
			cout<<ls[i]<<" ";
		cout<<endl;
	
		cout<<j<<endl;
	*/
	    build(1,1,j);
		for(i=0;i<n;i++)
		{
			//cout<<findpos(reg[i].l)+1<<" "<<findpos(reg[i].r)+1<<endl;
			paint(1,findpos(reg[i].l)+1,findpos(reg[i].r)+1,i+1);
		}
		ans=0;
		memset(flag,0,sizeof(flag));
		query(1,1,j);
		printf("%d\n",ans);

	}

	return 0;
}