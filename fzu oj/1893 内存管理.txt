#include<iostream>
#include<vector>
#include<string>
using namespace std;
class node
{
public:
	node* next;
	node* pre;
	int size;
	int id;
};
int main()
{
	int t,i;
	char s[10];
	int id,size;
	scanf("%d",&t);
	while(t--)
	{
		node* first=new node,*min;
		first->next=0;
		first->pre=0;
		first->size=100;
		first->id=0;
		vector<node*> b;
		node* p=first;
		bool flag;
		while(scanf("%s",s) && s[0]!='E')
		{
			if(s[0]=='C')
			{
				scanf("%d%d",&id,&size);
				flag=false;
				p=first;
				while(p)
				{
					if(!p->id && p->size>=size)
					{
						b.push_back(p)	;
						flag=true;
					}
					p=p->next;

				}
				if(flag)
				{
					min=b[0];
					for(i=1;i<b.size();i++)
					if(min->size>b[i]->size)
						min=b[i];
					node* q=new node;
					q->id=id;
					q->size=size;
					q->next=min;
					min->size-=size;
					if(min==first)
					{
						first=q;
						min->pre=q;
					}
					else
					{
						q->pre=min->pre;
						min->pre->next=q;
						min->pre=q;
					}
					if(min->size==0)
					{
						if(min->next)
						{
							min->next->pre=q;
							q->next=min->next;
						}
						else
							min->pre->next=0;
						delete min;

					}
					
					printf("Create process %d of size %d successfully!\n",id,size);
				}
				else
					printf("No enough memory!\n");
				
			}
			if(s[0]=='D')
			{
				flag=false;
				scanf("%d",&id);
				p=first;
				while(p)
				{
					if(p->id==id)
					{
					
						flag=true;
						size=p->size;
						if(p->next && p!=first && !p->next->id && !p->pre->id)
						{
							p->pre->size+=p->size+p->next->size;
							p->pre->next=p->next->next;
							if(p->next->next)
								p->next->next->pre=p->pre;
							delete p;
						}
						else
							if(p->next && !p->next->id)
							{
								p->next->size+=p->size;
							if(p==first)
							{first=p->next;}
							else
							{
								p->pre->next=p->next;
								p->next->pre=p->pre;
							}
							delete p;
						}
						else
							if(p->pre && !p->pre->id)
							{
								p->pre->size+=p->size;
								p->pre->next=p->next;
								if(p->next)
									p->next->pre=p->pre;
								delete p;
							}
							else
								p->id=0;
							
						break;
					}
					p=p->next;
				}

				if(flag)

					printf("Delete process %d of size %d successfully!\n",id,size);
				else
					printf("No such process!\n");
			}
			if(s[0]=='P')
			{
				p=first;
				while(p)
				{
					if(p->id)
						printf("P %d %d\n",p->id,p->size);
					else
						printf("H %d\n",p->size);
					p=p->next;
				}
			}
		}
	}
	return 0;
}