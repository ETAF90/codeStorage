#include<iostream>
using namespace std;
class Position
{
public:
	int row;
	int col;
	
};
class Queue
{
private:
	int front;
	int rear;
	int MaxSize;
	Position* queue;
public:
	Queue(int MaxQueueSize=10);

	~Queue(void){delete[] queue;};
	bool IsEmpty()const{return front==rear;}
	Queue& Add(const Position&x);
	Queue& Delete(Position &x);
};
Queue::Queue(int MaxQueueSize)
{
	MaxSize=MaxQueueSize+1;
	front=rear=0;
	queue=new Position[MaxSize];

}

Queue& Queue:: Add(const Position&x)
{
	rear=(rear+1)%MaxSize;
	queue[rear]=x;
	return *this;
}
Queue& Queue::Delete(Position &x)
{
	front=(front+1)%MaxSize;
	x = queue[front];
	return *this;
}

Position start,finish;
int grid[200][200];
int cnt[200][200];
int main()
{
	int m,n,k,i;
	Position offset[4];
	offset[0].row=0;offset[0].col=1;
	offset[1].row=1;offset[1].col=0;
	offset[2].row=0;offset[2].col=-1;
	offset[3].row=-1;offset[3].col=0;
	while(cin>>m>>n>>k)
	{
		
	for(i=1;i<=m;i++)
		for(int j=1;j<=n;j++)
		{
			grid[i][j]=0;
			cnt[i][j]=0;
		}
	int row,col;
	while(k--)
	{
		cin>>row>>col;
		grid[row][col]=1;
		
	}
	cin>>start.row>>start.col>>finish.row>>finish.col;
	if(start.row==finish.row && start.col==finish.col)
	{cout<<"0\n0\n";continue;}
	for(i=0;i<=m+1;i++)
	{
		grid[i][0]=1;
		grid[i][n+1]=1;
	}
	for(i=0;i<=n+1;i++)
	{
		grid[0][i]=1;
		grid[m+1][i]=1;
	}
	
	Position now=start,nbr;
	grid[now.row][now.col]=2;
	cnt[start.row][start.col]=1;
	Queue Q(1000);
	bool flag=false;
	while(1)
	{
		for(i=0;i<4;i++)
		{
			nbr.row=now.row+offset[i].row;
			nbr.col=now.col+offset[i].col;
			if(grid[nbr.row][nbr.col]==0)
			{
				grid[nbr.row][nbr.col]=grid[now.row][now.col]+1;
				cnt[nbr.row][nbr.col]=cnt[now.row][now.col];
				if(!flag) Q.Add(nbr);

			}
			else
				if(grid[nbr.row][nbr.col]==grid[now.row][now.col]+1)
					cnt[nbr.row][nbr.col]+=cnt[now.row][now.col];
			if(nbr.row==finish.row && nbr.col==finish.col)flag=true;
		}
		if(Q.IsEmpty()){break;}
		Q.Delete(now);
	}
	if(flag)
	{
		cout<<grid[finish.row][finish.col]-2<<endl;
		cout<<cnt[finish.row][finish.col]<<endl;
	}
	else
		cout<<"No Solution!"<<endl;



	}
	return 0;

}




