/*
* 邻接矩阵未优化 prim算法求最小生成树
* 407815 2011-08-05 11:05:10 Accepted 1096 Visual C++  62 ms 4124KB 1055B kite 
*/
#include<cstdio>
#include<cmath>
#include<cstring>
#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<functional>
#include<set>
#include<map>
using namespace std;
const int N=1001;
int g[N][N],dist[N],Q[N],w[N];
const int INIF=0x3fffffff;
int n;
int Prim()
{
 int i,j,top=n-1,u,best,result=0;
 for(i=1;i<n;++i)
 {
  dist[i]=g[0][i];
  Q[i-1]=i;
  //pre[i]=0;
 }
 for(i=1;i<n;++i)
 {
  for(best=0,j=1;j<top;++j)if(dist[Q[best]]>dist[Q[j]])best=j;
  u=Q[best];
  result+=dist[u];
  Q[best]=Q[--top];
  for(j=0;j<top;++j)if(dist[Q[j]]>g[u][Q[j]])
  {
   dist[Q[j]]=g[u][Q[j]];
   //pre[Q[j]]=u;
  }
 }
 return result;
}
int main()
{
 //freopen("new1.txt","r",stdin);
 int i,j,T;
 scanf("%d",&T);
 while(T--)
 {
  scanf("%d",&n);
  for(i=0;i<n;++i)
  {
   scanf("%d",&w[i]);
  }
  for(i=0;i<n;++i)
   for(j=0;j<n;++j)
   {
    scanf("%d",&g[i][j]);
    g[i][j]+=w[i]+w[j];
   }
  printf("%d\n",Prim());
 }
 return 0;
}