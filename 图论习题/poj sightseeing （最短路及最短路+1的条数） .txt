/*
 *	9337766	030902414	3463	Accepted	900K	79MS	G++	1980B	2011-09-20 00:29:04
 *  题意：求最短路的条数+比最短路大1的路劲条数	
 */
#include<iostream>
#include<cstring>
#include<cstdio>
#include<cmath>
#include<vector>
#include<queue>
using namespace std;
const int N=1010,M=10010,inf=0x3fffffff;
int n,m;
typedef struct edge{
	int u,v,len;
	edge(){}
	edge(int u1,int v1,int len1):u(u1),v(v1),len(len1){}
}edge;
edge E[M];
int head[M],next[M];

typedef struct pnode{
	int v,dist;
	pnode(){}
	pnode(int v1,int dist1):v(v1),dist(dist1){}
	bool operator<(const pnode& z)const 
	{return dist>z.dist;}
}pnode;
int dist[N][2],cnt[N][2];
bool vis[N][2];
void Dijkstra(int s,int t)
{
	int u,v,p,i,j;
	for(i=1;i<=n;++i)
	{
		dist[i][0]=dist[i][1]=inf;
		cnt[i][0]=cnt[i][1]=0;
		vis[i][0]=vis[i][1]=0;
	}
	dist[s][0]=0;
	cnt[s][0]=1;
	int min=inf,k;
	for(i=0;i<n+n;i++)					
	{
		min=inf;
		u=-1;
		for(j=1;j<=n;++j)
		{
			if(!vis[j][0] && dist[j][0]<min)
			{
				min=dist[j][0];
				u=j;
				k=0;
			}
			if(!vis[j][1] && dist[j][1]<min)
			{
				min=dist[j][1];
				u=j;
				k=1;
			}
		}
		if(u==-1)
			break;
		vis[u][k]=1;
		for(p=head[u];p!=-1;p=next[p])
		{
			v=E[p].v;
			if(dist[v][0]>min+E[p].len)
			{
				dist[v][1]=dist[v][0];
				cnt[v][1]=cnt[v][0];
				dist[v][0]=min+E[p].len;
				cnt[v][0]=cnt[u][k];
			}
			else if(dist[v][0]==min+E[p].len)
				cnt[v][0]+=cnt[u][k];
			else if(dist[v][1]>min+E[p].len)
			{
				dist[v][1]=min+E[p].len;
				cnt[v][1]=cnt[u][k];
			}
			else if(dist[v][1]==min+E[p].len)
				cnt[v][1]+=cnt[u][k];
		}

	}

}
int main()
{
	freopen("in.txt","r",stdin);
	int T,i,u,v,len;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&n,&m);
		memset(head,-1,sizeof(head));
		for(i=0;i<m;++i)
		{
			scanf("%d%d%d",&u,&v,&len);
			E[i]=edge(u,v,len);
			next[i]=head[u];
			head[u]=i;
		}
		scanf("%d%d",&u,&v);
		
		Dijkstra(u,v);
		//for(i=1;i<=n;++i)printf("%d: %d %d %d %d\n",i,dist[i][0],cnt[i][0],dist[i][1],cnt[i][1]);
		printf("%d\n",cnt[v][0]+(dist[v][0]+1==dist[v][1]?cnt[v][1]:0) );
	}
	return 0;
}