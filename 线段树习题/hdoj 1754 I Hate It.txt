#include<iostream>
using namespace std;
int ans;
struct node
{
	int l,r,max;
}a[600000];
void build(int i,int left,int right)//建树，每个区间的max值初始为0
{
	a[i].l=left;
	a[i].r=right;
	a[i].max=0;
	if(left==right)
		return ;
	int mid=(left+right)>>1;
	build(i<<1,left,mid);
	build((i<<1)+1,mid+1,right);
}
void update(int i,int x,int value) //更新某个点的值。
{
	if(a[i].l==x && a[i].r==x)    // 找到该点并更新。
	{a[i].max=value;return;}
	if(a[i].max<value)			//还未找到给点，若现区间的max比value小，更新现区间的max值。
		a[i].max=value;
	int mid=(a[i].l+a[i].r)>>1;
	if(x<=mid)
		update((i<<1),x,value);
	else
		update((i<<1)+1,x,value);
}
void query(int i,int left,int right)   //查询某区间 ans，（最大值）
{
	if(a[i].l==left && a[i].r==right)
	{
		if(ans<a[i].max)
			ans=a[i].max;
		return;
	}
	int mid=(a[i].l+a[i].r)>>1;
	if(right<=mid)
		query((i<<1),left,right);
	else
		if(left>mid)
			query((i<<1)+1,left,right);
		else
		{
			query((i<<1),left,mid);
			query((i<<1)+1,mid+1,right);
		}
}
int main()
{
	int n,m,i,tmp;
	char oper;
	while(scanf("%d%d",&n,&m)!=EOF)
	{
		build(1,1,n);
		for(i=1;i<=n;i++)
		{scanf("%d",&tmp);update(1,i,tmp);}
		getchar();
		while(m--)
		{
			oper=getchar();//scanf("%s",oper);
			if(oper=='U')
			{
				scanf("%d%d",&i,&tmp);
				update(1,i,tmp);
			}
			if(oper=='Q')
			{
				scanf("%d%d",&i,&tmp);
				ans=0;
				query(1,i,tmp);
				printf("%d\n",ans);
			}
			getchar();	
		}
	}	


	return 0;
}