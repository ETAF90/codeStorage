
/*
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <utility>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;
int main()
{
	map 
	return 0;
}
*/

#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <utility>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
using namespace std;
#define N 30000
bool flag[10001];
int ans;
map<int ,int> Map;
struct region
{
	int l,r;
}reg[10004];
struct node
{
	int l,r,v;
} a[3*N];
void build(int i,int left,int right)
{
	a[i].l=left;
	a[i].r=right;
	a[i].v=-1;
	if(left==right)
		return ;
	int mid=(left+right)>>1;
	build((i<<1),left,mid);
	build((i<<1)+1,mid+1,right);
}
void paint(int i,int left,int right,int color)
{
	if(a[i].l==left && a[i].r==right)
	{a[i].v=color;return;}
	if(a[i].v==color)
		return;
	if(a[i].v)
	{
		a[i*2].v=a[i*2+1].v=a[i].v;
		a[i].v=0;
	}
	int mid=(a[i].l+a[i].r)>>1;
	if(right<=mid)
		paint((i<<1),left,right,color);
	else
		if(left>mid)
			paint((i<<1)+1,left,right,color);
		else
		{
			paint(i<<1,left,mid,color);
			paint((i<<1)+1,mid+1,right,color);
		}
}
void query(int i,int left,int right)
{
	if(a[i].v)
	{
		if(!flag[a[i].v] && a[i].v!=-1)
		{
			ans++;
			flag[a[i].v]=true;
		}
		return;
	}
	int mid=(a[i].l+a[i].r)>>1;	
	if(right<=mid)
		query((i<<1),left,right);
	else
		if(left>mid)
			query((i<<1)+1,left,right);
		else
		{
			query((i<<1),left,mid);
			query((i<<1)+1,mid+1,right);
		}
	
}
int main()
{
	int i,c,n;
	map<int ,int>::iterator begin,end;
	scanf("%d",&c);
	while(c--)
	{
		scanf("%d",&n);
		build(1,1,2*n);
		Map.clear();
		for(i=1;i<=n;i++)
		{
			scanf("%d%d",&reg[i].l,&reg[i].r);
			Map[reg[i].l]=1;Map[reg[i].r]=1;
		}
		begin=Map.begin();
		end=Map.end();
		for(i=1;begin!=end;i++,begin++)
			begin->second=i;	
		for(i=1;i<=n;i++)
			paint(1,Map[reg[i].l],Map[reg[i].r],i);
		ans=0;
		memset(flag,0,sizeof(flag));
		query(1,1,N);
		printf("%d\n",ans);

	}

	return 0;
}