/*
 *	9378558 030902414 2828 Accepted 8664K 1516MS C++ 944B 2011-10-01 01:29:06 
 *	
	题意：给定n个插入操作：pos，val；代表在pos前面插入val这个值，最后要求输出最终的序列；
 * 	
 *	若用链表则最坏情况还是O（n*n）
 *	用线段树的方法：题意可以这样理解：从最后的插入操作开始，向前遍历每个插入操作，则pos代表val插入的位置之前必须要有且仅有pos个值。
 *	  	
 *	故可倒过来插入，1-N的每个数都为1，插入后置0.
 *	每次query去寻找每一个a[i].remain==x的位置a[i].l,即是最终要插入的位置。
 *
 */

#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
#define L(i) (i<<1)
#define R(i) (i<<1|1)
inline int Mid(int x,int y){
	return (x+y)>>1;
}
const int N=200001;
int val[N],pos[N],newpos[N];
typedef struct seg{
	int l,r,remain;
}seg;
seg a[N+N+N];

void build(int i,int l,int r){
	a[i].l=l;
	a[i].r=r;
	a[i].remain=r-l+1;
	if(l==r)return;
	int mid=Mid(l,r);
	build(L(i),l,mid);
	build(R(i),mid+1,r);
}
int Query(int i,int x){
	a[i].remain--;
	if(a[i].l==a[i].r)
		return a[i].l;
	if(a[L(i)].remain>=x)
		return Query(L(i),x);
	else
		return Query(R(i),x-a[L(i)].remain);
}
int main()
{
	freopen("in.txt","r",stdin);
	int n,i;
	while(scanf("%d",&n)!=EOF){
		build(1,1,n);
		for(i=1;i<=n;++i)
		{
			scanf("%d%d",pos+i,val+i);
		}
		for(i=n;i>0;--i){
			newpos[Query(1,pos[i]+1)]=i;
			
		}
		
		
		for(i=1;i<n;++i)
			printf("%d ",val[newpos[i]]);
		printf("%d\n",val[newpos[n]]);
	}
	return 0;
}